#!/usr/bin/env python3
import os
import json
import re
from datetime import datetime, timedelta
from collections import defaultdict
import openai
import gspread

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API ---
openai.api_key = os.environ['OPENAI_API_KEY']
GOOGLE_SHEET_ID = os.environ['GOOGLE_SHEET_ID']       # id –∏—Å—Ç–æ—á–Ω–∏–∫–∞
GOOGLE_SHEET2_ID = os.environ['GOOGLE_SHEET2_ID']     # id –ø—Ä–∏—ë–º–Ω–∏–∫–∞
creds = json.loads(os.environ['GOOGLE_CREDS_JSON'])
gc = gspread.service_account_from_dict(creds)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
DISCORD_EPOCH = 1420070400000

def parse_date(ts):
    try:
        return datetime.fromisoformat(ts).strftime('%d.%m.%Y')
    except:
        try:
            return datetime.strptime(ts, '%d.%m.%Y').strftime('%d.%m.%Y')
        except:
            if ts.isdigit():
                ms = (int(ts) >> 22) + DISCORD_EPOCH
                return datetime.fromtimestamp(ms / 1000.0).strftime('%d.%m.%Y')
    return datetime.now().strftime('%d.%m.%Y')

def estimate_tokens(text):
    return int(len(text) / 4)  # –≥—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞

# --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ ---
print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã...")
yesterday = datetime.utcnow().date() - timedelta(days=1)
sh_src = gc.open_by_key(GOOGLE_SHEET_ID)
df = sh_src.worksheet("archive").get_all_records()

messages_by_subnet = defaultdict(list)

for row in df:
    if parse_date(row['timestamp']) == yesterday.strftime('%d.%m.%Y'):
        subnet = str(row['subnet_number'])
        messages_by_subnet[subnet].append(row['content'])

if not messages_by_subnet:
    print("‚ö†Ô∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –≤—á–µ—Ä–∞.")
    exit()

actual_subnets = set(messages_by_subnet.keys())
actual_list_str = ', '.join(sorted(actual_subnets, key=int))

# --- –§–æ—Ä–º–∏—Ä—É–µ–º –µ–¥–∏–Ω—ã–π –∑–∞–ø—Ä–æ—Å ---
prompt_blocks = []
for subnet, messages in messages_by_subnet.items():
    block = f"Subnet {subnet}:\n" + "\n".join(str(m) for m in messages)
    prompt_blocks.append(block)

full_prompt = "\n\n".join(prompt_blocks)
user_prompt = (
    f"–í –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–¥—Å–µ—Ç–∏: {actual_list_str}.\n\n"
    f"{full_prompt}"
)
total_tokens = estimate_tokens(full_prompt)
print(f"üìä GPT-–≤–≤–æ–¥: ~{total_tokens} —Ç–æ–∫–µ–Ω–æ–≤")

# --- –ü—Ä–æ–º–ø—Ç ---
system_prompt = (
    "–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫. –¢–µ–±–µ –ø–æ—Å—Ç—É–ø–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–¥—Å–µ—Ç—è–º. "
    "–†–∞–±–æ—Ç–∞–π –¢–û–õ–¨–ö–û —Å —Ç–µ–º–∏ –ø–æ–¥—Å–µ—Ç—è–º–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–∏–≤–µ–¥–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∏–∂–µ ‚Äî –Ω–∏–∫–∞–∫–∏—Ö –¥—Ä—É–≥–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –Ω–µ –¥–µ–ª–∞–π. "
    "–ù–ï –¥–æ–±–∞–≤–ª—è–π –≤—ã–º—ã—à–ª–µ–Ω–Ω—ã–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥—Å–µ—Ç–∏. "
    "–î–ª—è –ö–ê–ñ–î–û–ô –ø–æ–¥—Å–µ—Ç–∏ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏ –æ—Ç—á—ë—Ç. "
    "–î–∞–∂–µ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –º–∞–ª–æ –∏–ª–∏ –æ–Ω–∏ –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–∞–ø–∏—à–∏ —à–∞–±–ª–æ–Ω–Ω—ã–π –æ—Ç—á—ë—Ç, –≥–¥–µ –ø–æ—Å—Ç–∞–≤—å –ø—Ä–æ—á–µ—Ä–∫–∏ –ø–æ –Ω—É–∂–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º. "
    "–ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π –Ω–∏ –æ–¥–Ω—É –ø–æ–¥—Å–µ—Ç—å! –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å—Ç—Ä–æ–≥–æ —Ç–∞–∫–æ–π:\n"
    "Subnet <–Ω–æ–º–µ—Ä>\n"
    "üõë ...\n"
    "üîÑ ...\n"
    "üöÄ ...\n\n"
    "–ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ‚Äî —Å—Ç–∞–≤—å –ø—Ä–æ—á–µ—Ä–∫.\n"
    "–ü—Ä–∏–º–µ—Ä:\n"
    "Subnet 70\n"
    "üõë –ñ–∞–ª–æ–±–∞ –Ω–∞ –Ω–∏–∑–∫–∏–µ –≤—ã–ø–ª–∞—Ç—ã;\n"
    "üîÑ –û—Ç–≤–µ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—É;\n"
    "üöÄ –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Ä–µ–ª–∏–∑ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏.\n\n"
    "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–¥—Å–µ—Ç–∏, —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ—Ç–æ—Ä—ã–º –µ—Å—Ç—å –Ω–∏–∂–µ!"
)

# --- GPT-–∑–∞–ø—Ä–æ—Å ---
print("üß† –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ GPT...")
response = openai.chat.completions.create(
    model="gpt-4o-mini",
    messages=[
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_prompt}
    ],
    temperature=0
)
result = response.choices[0].message.content.strip()
print("üì§ –û—Ç–≤–µ—Ç GPT (–ø–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤):")
print(result[:1000])
        
# --- –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É ---
sh_dst = gc.open_by_key(GOOGLE_SHEET2_ID)
sheet = sh_dst.worksheet("Dis –∏ –≤—ã–≤–æ–¥—ã")
header = sheet.row_values(1)
yesterday_str = yesterday.strftime('%d.%m.%Y')

# –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ —Å –Ω—É–∂–Ω–æ–π –¥–∞—Ç–æ–π ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü!
if not any(h.strip() == yesterday_str for h in header):
    sheet.update_cell(1, len(header) + 1, yesterday_str)
    print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è –¥–∞—Ç—ã: {yesterday_str}")
    header.append(yesterday_str)  # —á—Ç–æ–±—ã col –≤—ã—á–∏—Å–ª–∏–ª—Å—è –≤–µ—Ä–Ω–æ

col = next(i for i, h in enumerate(header) if h.strip() == yesterday_str) + 1

# --- –†–∞–∑–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ ---
print("‚úçÔ∏è –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
netids = [str(int(i)) for i in sheet.col_values(1)[1:] if i.strip()]
current_subnet = None
buffer = []
updates = {}

for line in result.splitlines():
    if re.match(r'^[\*\s]*Subnet\s+\d+[.:]?[\*\s]*', line.strip()):
        if current_subnet and buffer:
            try:
                normalized_subnet = str(int(float(current_subnet)))
            except:
                normalized_subnet = current_subnet.strip()
            updates[normalized_subnet] = "\n".join(buffer).strip()
        match = re.search(r'Subnet\s+(\d+(?:\.\d+)?)', line)
        current_subnet = match.group(1) if match else None
        buffer = []
    elif current_subnet:
        buffer.append(line)

if current_subnet and buffer:
    try:
        normalized_subnet = str(int(float(current_subnet)))
    except:
        normalized_subnet = current_subnet.strip()
    updates[normalized_subnet] = "\n".join(buffer).strip()

print(f"üì¶ –ö–ª—é—á–∏ –ø–æ–¥—Å–µ—Ç–µ–π –¥–ª—è –∑–∞–ø–∏—Å–∏: {list(updates.keys())}")
print(f"üì¶ NetID –≤ —Ç–∞–±–ª–∏—Ü–µ: {netids}")
print(f"üîç –°–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {len(actual_subnets)} –ø–æ–¥—Å–µ—Ç–µ–π: {sorted(actual_subnets)}")
if set(updates.keys()) - actual_subnets:
    print(f"‚ö†Ô∏è GPT –ø–æ–ø—ã—Ç–∞–ª—Å—è –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–∞–±–Ω–µ—Ç—ã: {set(updates.keys()) - actual_subnets}")


# --- –í–û–¢ –¢–£–¢! –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–¥—Å–µ—Ç–∏, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –±—ã–ª–∏ –≤ actual_subnets ---
filtered_updates = {k: v for k, v in updates.items() if k in actual_subnets}

# --- –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –±–∞—Ç—á–∞ ---
cell_list = []
for subnet, summary in filtered_updates.items():    # <--- –¢–û–õ–¨–ö–û filtered_updates!
    if subnet in netids:
        row = netids.index(subnet) + 2
        cell = gspread.cell.Cell(row=row, col=col, value=summary)
        cell_list.append(cell)
        print(f"üìù –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ: {subnet} ‚Üí row {row}, col {col}")
    else:
        print(f"‚ö†Ô∏è Subnet {subnet} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ")

# --- –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (batch update) ---
if cell_list:
    sheet.update_cells(cell_list)
    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {len(cell_list)} —è—á–µ–µ–∫ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º")
else:
    print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏!")

print("üéâ –ì–æ—Ç–æ–≤–æ. –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${:.4f}".format(0.0005 * total_tokens / 1000 + 0.0015 * 2000 / 1000))
