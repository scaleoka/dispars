#!/usr/bin/env python3
import os
import json
import re
from datetime import datetime, timedelta
from collections import defaultdict
import openai
import gspread

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API ---
openai.api_key = os.environ['OPENAI_API_KEY']
SRC_SHEET_ID = os.environ['SRC_SHEET_ID']
DST_SHEET_ID = os.environ['DST_SHEET_ID']
creds = json.loads(os.environ['GOOGLE_CREDS_JSON'])
gc = gspread.service_account_from_dict(creds)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
DISCORD_EPOCH = 1420070400000

def parse_date(ts):
    try:
        return datetime.fromisoformat(ts).strftime('%d.%m.%Y')
    except:
        try:
            return datetime.strptime(ts, '%d.%m.%Y').strftime('%d.%m.%Y')
        except:
            if ts.isdigit():
                ms = (int(ts) >> 22) + DISCORD_EPOCH
                return datetime.fromtimestamp(ms / 1000.0).strftime('%d.%m.%Y')
    return datetime.now().strftime('%d.%m.%Y')

def estimate_tokens(text):
    return int(len(text) / 4)  # –≥—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞

# --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ ---
print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã...")
yesterday = datetime.utcnow().date() - timedelta(days=1)
sh_src = gc.open_by_key(SRC_SHEET_ID)
df = sh_src.worksheet("archive").get_all_records()

messages_by_subnet = defaultdict(list)

for row in df:
    if parse_date(row['timestamp']) == yesterday.strftime('%d.%m.%Y'):
        subnet = str(row['subnet_number'])
        messages_by_subnet[subnet].append(row['content'])

if not messages_by_subnet:
    print("‚ö†Ô∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –≤—á–µ—Ä–∞.")
    exit()

# --- –§–æ—Ä–º–∏—Ä—É–µ–º –µ–¥–∏–Ω—ã–π –∑–∞–ø—Ä–æ—Å ---
prompt_blocks = []
for subnet, messages in messages_by_subnet.items():
    block = f"Subnet {subnet}:\n" + "\n".join(messages)
    prompt_blocks.append(block)

full_prompt = "\n\n".join(prompt_blocks)
total_tokens = estimate_tokens(full_prompt)
print(f"üìä GPT-–≤–≤–æ–¥: ~{total_tokens} —Ç–æ–∫–µ–Ω–æ–≤")

# --- –ü—Ä–æ–º–ø—Ç ---
system_prompt = (
    "–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫. –¢–µ–±–µ –ø–æ—Å—Ç—É–ø–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–¥—Å–µ—Ç—è–º.\n"
    "–î–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥—Å–µ—Ç–∏ —Å–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –ø–æ —Ç—Ä—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
    "üõë –ü—Ä–æ–±–ª–µ–º—ã\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è\nüöÄ –†–µ–ª–∏–∑—ã / –ü–ª–∞–Ω—ã\n\n"
    "–ï—Å–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ‚Äî –ø–æ—Å—Ç–∞–≤—å –ø—Ä–æ—á–µ—Ä–∫. –û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
    "Subnet 70\nüõë ...\nüîÑ ...\nüöÄ ...\n\nSubnet 88\nüõë ...\nüîÑ ...\nüöÄ ..."
)

# --- GPT-–∑–∞–ø—Ä–æ—Å ---
print("üß† –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ GPT...")
response = openai.chat.completions.create(
    model="gpt-4o-mini",
    messages=[
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": full_prompt}
    ],
    temperature=0
)
result = response.choices[0].message.content.strip()
print("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")

# --- –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É ---
sh_dst = gc.open_by_key(DST_SHEET_ID)
sheet = sh_dst.worksheet("Dis –∏ –≤—ã–≤–æ–¥—ã")
header = sheet.row_values(1)
yesterday_str = yesterday.strftime('%d.%m.%Y')
if yesterday_str not in header:
    raise Exception("‚ùå –í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ —Å –¥–∞—Ç–æ–π " + yesterday_str)
col = header.index(yesterday_str) + 1

# --- –†–∞–∑–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ ---
print("‚úçÔ∏è –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
netids = sheet.col_values(1)[1:]  # –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
current_subnet = None
buffer = []
updates = {}
for line in result.splitlines():
    if line.strip().startswith("Subnet"):
        if current_subnet and buffer:
            updates[current_subnet] = "\n".join(buffer).strip()
        current_subnet = line.strip().split()[1]
        buffer = []
    elif current_subnet:
        buffer.append(line)
if current_subnet and buffer:
    updates[current_subnet] = "\n".join(buffer).strip()

# --- –ü–∏—à–µ–º –≤ —è—á–µ–π–∫–∏ ---
for subnet, summary in updates.items():
    if subnet in netids:
        row = netids.index(subnet) + 2
        sheet.update_cell(row, col, summary)
        print(f"‚úÖ {subnet} ‚Üí row {row}, col {col}")
    else:
        print(f"‚ö†Ô∏è Subnet {subnet} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ")

print("üéâ –ì–æ—Ç–æ–≤–æ. –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${:.4f}".format(0.0005 * total_tokens / 1000 + 0.0015 * 2000 / 1000))
