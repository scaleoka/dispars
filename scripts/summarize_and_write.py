#!/usr/bin/env python3
import os
import json
import re
import time
from datetime import datetime, timedelta
from collections import defaultdict
import openai
import gspread

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API ---
openai.api_key = os.environ['OPENAI_API_KEY']
GOOGLE_SHEET_ID = os.environ['GOOGLE_SHEET_ID']       # id –∏—Å—Ç–æ—á–Ω–∏–∫–∞
GOOGLE_SHEET2_ID = os.environ['GOOGLE_SHEET2_ID']     # id –ø—Ä–∏—ë–º–Ω–∏–∫–∞
creds = json.loads(os.environ['GOOGLE_CREDS_JSON'])
gc = gspread.service_account_from_dict(creds)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
DISCORD_EPOCH = 1420070400000

def parse_date(ts):
    try:
        return datetime.fromisoformat(ts).strftime('%d.%m.%Y')
    except:
        try:
            return datetime.strptime(ts, '%d.%m.%Y').strftime('%d.%m.%Y')
        except:
            if ts.isdigit():
                ms = (int(ts) >> 22) + DISCORD_EPOCH
                return datetime.fromtimestamp(ms / 1000.0).strftime('%d.%m.%Y')
    return datetime.now().strftime('%d.%m.%Y')

def estimate_tokens(text):
    return int(len(text) / 4)  # –≥—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞

# --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ ---
print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã...")
yesterday = datetime.utcnow().date() - timedelta(days=1)
sh_src = gc.open_by_key(GOOGLE_SHEET_ID)
df = sh_src.worksheet("archive").get_all_records()

messages_by_subnet = defaultdict(list)

for row in df:
    if parse_date(row['timestamp']) == yesterday.strftime('%d.%m.%Y'):
        subnet = str(row['subnet_number'])
        messages_by_subnet[subnet].append(row['content'])

if not messages_by_subnet:
    print("‚ö†Ô∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –≤—á–µ—Ä–∞.")
    exit()

actual_subnets = set(messages_by_subnet.keys())
filtered_actual_subnets = [s for s in actual_subnets if str(s).strip().isdigit()]
actual_list_str = ', '.join(sorted(filtered_actual_subnets, key=int))

# --- –§–æ—Ä–º–∏—Ä—É–µ–º –µ–¥–∏–Ω—ã–π –∑–∞–ø—Ä–æ—Å ---
prompt_blocks = []
for subnet, messages in messages_by_subnet.items():
    block = f"Subnet {subnet}:\n" + "\n".join(str(m) for m in messages)
    prompt_blocks.append(block)

full_prompt = "\n\n".join(prompt_blocks)
user_prompt = (
    f"–í –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–¥—Å–µ—Ç–∏: {actual_list_str}.\n\n"
    f"{full_prompt}"
)
total_tokens = estimate_tokens(full_prompt)
print(f"üìä GPT-–≤–≤–æ–¥: ~{total_tokens} —Ç–æ–∫–µ–Ω–æ–≤")

# --- –ü—Ä–æ–º–ø—Ç ---
system_prompt = (
    "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –¢–µ–±–µ –ø–æ—Å—Ç—É–ø–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–¥—Å–µ—Ç—è–º. "
    "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–ª—è –ö–ê–ñ–î–û–ô –ø–æ–¥—Å–µ—Ç–∏, –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω–æ–π –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –Ω–∏–∂–µ, –Ω–∞–ø–∏—Å–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∏ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–π –æ—Ç—á—ë—Ç. "
    "–ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π –¥–∞–∂–µ –º–µ–ª—å—á–∞–π—à–∏–µ –¥–µ—Ç–∞–ª–∏: —É–ø–æ–º–∏–Ω–∞–π –≤—Å—ë ‚Äî —Å—Å—ã–ª–∫–∏, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏, –∏–Ω—Å–∞–π–¥—ã, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, –≤–æ–ø—Ä–æ—Å—ã, –¥–æ–≥–∞–¥–∫–∏, –æ–±–µ—â–∞–Ω–∏—è, —Ä–µ–∞–∫—Ü–∏–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –∫–∞–∂—É—Ç—Å—è –Ω–µ—Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏. "
    "–ù–µ —Å–æ–∫—Ä–∞—â–∞–π, –Ω–µ –æ–±–æ–±—â–∞–π ‚Äî –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ —á—Ç–æ-—Ç–æ —É—Ç–æ—á–Ω–∏–ª, —Å–ø—Ä–æ—Å–∏–ª, –≤—ã—Ä–∞–∑–∏–ª –º–Ω–µ–Ω–∏–µ –∏–ª–∏ —ç–º–æ—Ü–∏—é ‚Äî –≤–∫–ª—é—á–∞–π —ç—Ç–æ –≤ —Ç–µ–∫—Å—Ç. "
    "–ù–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ, –ª—É—á—à–µ –ø—Ä–∏–≤–µ–¥–∏ —Ñ–∞–∫—Ç—ã –∏–ª–∏ —Ü–∏—Ç–∞—Ç—ã, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å—É—Ç—å –æ–±—Å—É–∂–¥–µ–Ω–∏—è. "
    "–†–∞–±–æ—Ç–∞–π –¢–û–õ–¨–ö–û —Å —Ç–µ–º–∏ –ø–æ–¥—Å–µ—Ç—è–º–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∏–∂–µ ‚Äî –Ω–∏–∫–∞–∫–∏—Ö –¥—Ä—É–≥–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –Ω–µ –¥–µ–ª–∞–π –∏ –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π! "
    "–ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π –Ω–∏ –æ–¥–Ω—É –ø–æ–¥—Å–µ—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞. –î–∞–∂–µ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –º–∞–ª–æ ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–∞–ø–∏—à–∏ —à–∞–±–ª–æ–Ω–Ω—ã–π –æ—Ç—á—ë—Ç –∏ –ø–æ—Å—Ç–∞–≤—å –ø—Ä–æ—á–µ—Ä–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –µ—Å–ª–∏ –Ω–µ—á–µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å.\n\n"
    "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å—Ç—Ä–æ–≥–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
    "üõë –ü—Ä–æ–±–ª–µ–º—ã ‚Äî –ª—é–±—ã–µ –∂–∞–ª–æ–±—ã, –æ—à–∏–±–∫–∏, –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏—è, –Ω–µ–≥–∞—Ç–∏–≤, –Ω–µ—è—Å–Ω–æ—Å—Ç–∏, —Å–ø–æ—Ä–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã, –ø—Ä–æ—Å—å–±—ã –æ –ø–æ–º–æ—â–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ–º–Ω–æ–≥–æ;\n"
    "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è ‚Äî –ª—é–±—ã–µ –æ—Ç–≤–µ—Ç—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è, –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∏—Ç–æ–≥–∏, –¥–∞–∂–µ –º–µ–ª–∫–∏–µ;\n"
    "üöÄ –†–µ–ª–∏–∑—ã / –ü–ª–∞–Ω—ã ‚Äî –≤—Å–µ –ø–ª–∞–Ω—ã, –∞–Ω–æ–Ω—Å—ã, –æ–±—Å—É–∂–¥–µ–Ω–∏—è –±—É–¥—É—â–∏—Ö —à–∞–≥–æ–≤, –æ–∂–∏–¥–∞–Ω–∏—è, –æ–±–µ—â–∞–Ω–∏—è, —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–µ–ª–∏–∑–æ–≤, –∑–∞–¥–∞—á–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏–ª–∏ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤;\n\n"
    "–ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ‚Äî —Å—Ç–∞–≤—å –ø—Ä–æ—á–µ—Ä–∫.\n"
    "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –°–¢–†–û–ì–û —Ç–∞–∫–æ–π (–Ω–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏—Ö –ø–æ–¥—Å–µ—Ç–µ–π –∏ –Ω–µ –º–µ–Ω—è–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É):\n\n"
    "Subnet <–Ω–æ–º–µ—Ä>\n"
    "üõë ...\n"
    "üîÑ ...\n"
    "üöÄ ...\n\n"
    "–ü—Ä–∏–º–µ—Ä:\n"
    "Subnet 70\n"
    "üõë –ñ–∞–ª–æ–±–∞ –Ω–∞ –Ω–∏–∑–∫–∏–µ –≤—ã–ø–ª–∞—Ç—ã –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü –∏ –≤–æ–ø—Ä–æ—Å, –ø–æ—á–µ–º—É —Å–Ω–∏–∑–∏–ª–∏—Å—å –±–∞–ª–ª—ã;\n"
    "üîÑ –ö–æ–º–∞–Ω–¥–∞ –ø–æ—è—Å–Ω–∏–ª–∞, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Å–∫–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –∏ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∞ –ø–æ—á–∏—Ç–∞—Ç—å FAQ. –û–¥–∏–Ω –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–¥–µ–ª–∏–ª—Å—è —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º, —á—Ç–æ –≤—ã–ø–ª–∞—Ç—ã —É –Ω–µ–≥–æ —Ç–æ–∂–µ —É–ø–∞–ª–∏, –Ω–æ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å;\n"
    "üöÄ –û–∂–∏–¥–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–∫–æ—Ä–∏–Ω–≥–∞, –∫–æ–º–∞–Ω–¥–∞ –æ–±–µ—â–∞–ª–∞ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ª–∏–∑ –≤ –∫–∞–Ω–∞–ª–µ –Ω–æ–≤–æ—Å—Ç–µ–π.\n\n"
    "–ù–µ —É–ø—É—Å–∫–∞–π –Ω–∏ –æ–¥–Ω–æ–π –¥–µ—Ç–∞–ª–∏! –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–¥—Å–µ—Ç–∏, —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ—Ç–æ—Ä—ã–º –µ—Å—Ç—å –Ω–∏–∂–µ."
)

# --- –ë–ê–¢–ß–ï–í–ê–Ø GPT-–û–ë–†–ê–ë–û–¢–ö–ê ---
BATCH_SIZE = 10   # <= –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏

subnet_items = list(messages_by_subnet.items())
all_updates = {}

for batch_start in range(0, len(subnet_items), BATCH_SIZE):
    batch = subnet_items[batch_start:batch_start+BATCH_SIZE]
    batch_subnets = [subnet for subnet, _ in batch]
    batch_blocks = [
        f"Subnet {subnet}:\n" + "\n".join(str(m) for m in messages)
        for subnet, messages in batch
    ]
    batch_prompt = "\n\n".join(batch_blocks)
    batch_list_str = ', '.join(batch_subnets)
    user_prompt = (
        f"–í –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–¥—Å–µ—Ç–∏: {batch_list_str}.\n\n"
        f"{batch_prompt}"
    )

    # --- –û–ë–†–ê–ë–û–¢–ö–ê RATE LIMIT ---
    for attempt in range(10):
        try:
            response = openai.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                temperature=0
            )
            break
        except openai.RateLimitError:
            wait_sec = 5 + attempt * 5
            print(f"üí§ Rate limit exceeded, –∂–¥—ë–º {wait_sec} —Å–µ–∫—É–Ω–¥...")
            time.sleep(wait_sec)
    else:
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç OpenAI: Rate limit –Ω–µ –∏—Å—á–µ–∑ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫")

    result = response.choices[0].message.content.strip()
    print(f"üì§ –û—Ç–≤–µ—Ç GPT –¥–ª—è –±–∞—Ç—á–∞ {batch_start // BATCH_SIZE + 1} (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
    print(result[:500])
    
    # --- –†–∞–∑–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±–∞—Ç—á–∞ ---
    current_subnet = None
    buffer = []
    batch_updates = {}
    for line in result.splitlines():
        if re.match(r'^[\*\s]*Subnet\s+\d+[.:]?[\*\s]*', line.strip()):
            if current_subnet and buffer:
                try:
                    normalized_subnet = str(int(float(current_subnet)))
                except:
                    normalized_subnet = current_subnet.strip()
                batch_updates[normalized_subnet] = "\n".join(buffer).strip()
            match = re.search(r'Subnet\s+(\d+(?:\.\d+)?)', line)
            current_subnet = match.group(1) if match else None
            buffer = []
        elif current_subnet:
            buffer.append(line)
    if current_subnet and buffer:
        try:
            normalized_subnet = str(int(float(current_subnet)))
        except:
            normalized_subnet = current_subnet.strip()
        batch_updates[normalized_subnet] = "\n".join(buffer).strip()
    
    # --- –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç ---
    all_updates.update(batch_updates)

print(f"üì¶ –°–æ–±—Ä–∞–Ω–æ –∏—Ç–æ–≥–æ–≤—ã—Ö –æ—Ç—á—ë—Ç–æ–≤: {len(all_updates)} –ø–æ–¥—Å–µ—Ç–µ–π")
print(f"üîç –°–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {len(actual_subnets)} –ø–æ–¥—Å–µ—Ç–µ–π: {sorted(actual_subnets)}")
if set(all_updates.keys()) - actual_subnets:
    print(f"‚ö†Ô∏è GPT –ø–æ–ø—ã—Ç–∞–ª—Å—è –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–∞–±–Ω–µ—Ç—ã: {set(all_updates.keys()) - actual_subnets}")

# --- –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É ---
sh_dst = gc.open_by_key(GOOGLE_SHEET2_ID)
sheet = sh_dst.worksheet("Dis –∏ –≤—ã–≤–æ–¥—ã")
header = sheet.row_values(1)
yesterday_str = yesterday.strftime('%d.%m.%Y')

# === –ë–õ–û–ö: –µ—Å–ª–∏ –Ω—É–∂–Ω–æ–π –¥–∞—Ç—ã –Ω–µ—Ç –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ ‚Äî —Å–æ–∑–¥–∞—ë–º —Å—Ç–æ–ª–±–µ—Ü —Å–ø—Ä–∞–≤–∞ ===
if not any(h.strip() == yesterday_str for h in header):
    new_col_index = len(header) + 1  # gspread uses 1-based index
    sheet.add_cols(1)
    sheet.update_cell(1, new_col_index, yesterday_str)
    print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è –¥–∞—Ç—ã: {yesterday_str}")
    header.append(yesterday_str)
    col = new_col_index
else:
    col = next(i for i, h in enumerate(header) if h.strip() == yesterday_str) + 1

netids = [str(int(i)) for i in sheet.col_values(1)[1:] if i.strip()]

# --- –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–¥—Å–µ—Ç–∏, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –±—ã–ª–∏ –≤ actual_subnets ---
filtered_updates = {k: v for k, v in all_updates.items() if k in actual_subnets}

cell_list = []
for subnet, summary in filtered_updates.items():
    if subnet in netids:
        row = netids.index(subnet) + 2
        cell = gspread.cell.Cell(row=row, col=col, value=summary)
        cell_list.append(cell)
        print(f"üìù –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ: {subnet} ‚Üí row {row}, col {col}")
    else:
        print(f"‚ö†Ô∏è Subnet {subnet} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ")

if cell_list:
    sheet.update_cells(cell_list)
    print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {len(cell_list)} —è—á–µ–µ–∫ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º")
else:
    print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏!")

print("üéâ –ì–æ—Ç–æ–≤–æ. –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${:.4f}".format(0.0005 * total_tokens / 1000 + 0.0015 * 2000 / 1000))
