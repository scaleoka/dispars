#!/usr/bin/env python3
import os
import json
from collections import defaultdict
from datetime import datetime, timedelta
import openai
import gspread

# --- Constants ---
DISCORD_EPOCH = 1420070400000  # for Discord snowflake parsing

# --- Auth ---
creds_json = os.environ.get('GOOGLE_CREDS_JSON')
if not creds_json:
    raise RuntimeError('GOOGLE_CREDS_JSON is missing')
creds_dict = json.loads(creds_json)
gc = gspread.service_account_from_dict(creds_dict)

openai_key = os.environ.get('OPENAI_API_KEY')
if not openai_key:
    raise RuntimeError('OPENAI_API_KEY is missing')
openai.api_key = openai_key

src_key = os.environ.get('SRC_SHEET_ID')
dst_key = os.environ.get('DST_SHEET_ID')
if not src_key or not dst_key:
    raise RuntimeError('SRC_SHEET_ID and DST_SHEET_ID are required')

# --- Timestamp parsing ---
def parse_date(ts: str) -> str:
    try:
        dt = datetime.fromisoformat(ts)
    except ValueError:
        try:
            dt = datetime.strptime(ts, '%d.%m.%Y')
        except ValueError:
            if ts.isdigit():
                ms = (int(ts) >> 22) + DISCORD_EPOCH
                dt = datetime.fromtimestamp(ms / 1000.0)
            else:
                dt = datetime.now()
    return dt.strftime('%d.%m.%Y')

# --- GPT –∞–Ω–∞–ª–∏–∑ ---
def analyze_with_openai(messages: list[str]) -> str:
    system_prompt = (
        "–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫. –¢–µ–±–µ –ø–æ—Å—Ç—É–ø–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. "
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Ö –∏ —Å–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ —Ç—Ä—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
        "üõë –ü—Ä–æ–±–ª–µ–º—ã\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è\nüöÄ –†–µ–ª–∏–∑—ã / –ü–ª–∞–Ω—ã\n\n"
        "–î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã–¥–µ–ª–∏ —Ç–µ–∑–∏—Å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã (–≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞), —Å–æ—Ö—Ä–∞–Ω—è—è –¥–µ—Ç–∞–ª–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç. "
        "–ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–µ —É–ø—Ä–æ—â–∞–π –∏ –Ω–µ —Å–æ–∫—Ä–∞—â–∞–π –≤–∞–∂–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏. "
        "–ù–µ –ø–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞–π ‚Äî –≤—ã–∂–∏–º–∞–π —Å—É—Ç—å. –ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∫–∞–∫ –±–ª–æ–∫ —Ñ–∞–∫—Ç–æ–≤.\n\n"
        "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É—é—â–∏–π:\n\n"
        "üõë –ü—Ä–æ–±–ª–µ–º—ã\n‚Ä¢ ‚Ä¶\n‚Ä¢ ‚Ä¶\n\n"
        "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è\n‚Ä¢ ‚Ä¶\n‚Ä¢ ‚Ä¶\n\n"
        "üöÄ –†–µ–ª–∏–∑—ã / –ü–ª–∞–Ω—ã\n‚Ä¢ ‚Ä¶\n‚Ä¢ ‚Ä¶"
    )
    user_prompt = "\n".join(messages)
    response = openai.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt}
        ],
        temperature=0
    )
    return response.choices[0].message.content.strip()

# --- Main logic ---
def main():
    # –î–∞—Ç–∞ –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
    yesterday = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0) - timedelta(days=1)
    target_date = yesterday.strftime('%d.%m.%Y')
    print(f"DEBUG: Filtering messages for date {target_date}")

    # –ß—Ç–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    sh_src = gc.open_by_key(src_key)
    sheet_src = sh_src.worksheet('archive')
    rows = sheet_src.get_all_values()
    header = rows[0]

    try:
        ts_idx = header.index('timestamp')
        id_idx = header.index('subnet_number')
        msg_idx = header.index('content')
    except ValueError as e:
        raise RuntimeError(f"Required column not found: {e}")

    groups = defaultdict(list)
    for row in rows[1:]:
        date_part = parse_date(row[ts_idx])
        if date_part == target_date:
            subnet = str(row[id_idx])
            groups[subnet].append(row[msg_idx])
    print(f"DEBUG: Found messages for subnets: {list(groups.keys())}")

    summaries = {}
    for subnet, msgs in groups.items():
        print(f"DEBUG: Analyzing subnet {subnet} ({len(msgs)} messages)")
        summaries[subnet] = analyze_with_openai(msgs)

    # –ó–∞–ø–∏—Å—å –≤ —Ü–µ–ª–µ–≤–æ–π –ª–∏—Å—Ç
    sh_dst = gc.open_by_key(dst_key)
    sheet_dst = sh_dst.worksheet('Dis –∏ –≤—ã–≤–æ–¥—ã')
    header_dst = sheet_dst.row_values(1)

    if target_date not in header_dst:
        raise RuntimeError(f"Date {target_date} not found in destination header")
    col_idx = header_dst.index(target_date) + 1
    print(f"DEBUG: Writing to column {col_idx} (header '{target_date}')")

    netids = sheet_dst.col_values(1)[1:]
    for subnet, summary in summaries.items():
        if subnet in netids:
            row_idx = netids.index(subnet) + 2
            sheet_dst.update_cell(row_idx, col_idx, summary)
            print(f"‚úÖ Wrote summary for subnet {subnet} ‚Üí row {row_idx}, col {col_idx}")
        else:
            print(f"‚ö†Ô∏è Subnet {subnet} not found in NetID column ‚Äî skipped.")

if __name__ == '__main__':
    main()
